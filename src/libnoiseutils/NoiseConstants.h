// noiseutils.h
//
// Copyright (C) 2003-2005 Jason Bevins
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The developer's email is jlbezigvins@gmzigail.com (for great email, take
// off every 'zig'.)
//


/// @mainpage noiseutils
///
/// @section intro Introduction
///
/// This library contains useful classes for creating and rendering
/// two-dimensional noise maps containing coherent noise that was
/// generated from the libnoise library.  These classes are used to create
/// procedural textures and terrain height maps.
///
/// noiseutils is known to compile under Windows 2000 Service Pack 4
/// (using Microsoft Visual C++ 5.0) and under Gentoo Linux 10.0 (using
/// gcc 3.3.4).  It should be portable across all platforms that can
/// compile libnoise.
///
/// @section classes Classes
///
/// This library contains the following classes:
/// - A <i>noise map</i> class: This class implements a two-dimensional
///   array that stores floating-point values.  It's designed to store
///   coherent-noise values generated by a noise module.
/// - Several <i>noise-map builder</i> classes: Each of these classes
///   fills a noise map with coherent-noise values generated by a noise
///   module.  While filling a noise map, it iterates the coordinates of
///   the input value along the surface of a specific mathematical object.
///   Each of these classes implements a different mathematical object,
///   such as a plane, a cylinder, or a sphere.
/// - An <i>image</i> class: This class implements a two-dimensional array
///   that stores color values.
/// - Several <i>image-renderer</i> classes: these classes render images
///   given the contents of a noise map.  Each of these classes renders an
///   image in a different way.
///
/// @section contact Contact
///
/// Contact jas for questions about noiseutils.  The spam-resistant email
/// address is jlbezigvins@gmzigail.com (For great email, take off every
/// <a href=http://www.planettribes.com/allyourbase/story.shtml>zig</a>.)


#ifndef NOISECONSTANTS_H
#define NOISECONSTANTS_H

namespace noise {

    namespace utils {

        class NoiseConstants {

        public:
            /// The maximum width of a raster.
            static constexpr int RASTER_MAX_WIDTH = 32767;

            /// The maximum height of a raster.
            static constexpr int RASTER_MAX_HEIGHT = 32767;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
            // The raster's stride magnitude must be a multiple of this constant.
            static constexpr int RASTER_STRIDE_BOUNDARY = 4;
#endif

            /// Number of meters per point in a Terragen terrain (TER) file.
            static constexpr double DEFAULT_METERS_PER_POINT = 30.0;

            /// Same as the DEFAULT_METERS_PER_POINT constant, but for us
            /// canuckleheads.
            static constexpr double DEFAULT_METRES_PER_POINT = DEFAULT_METERS_PER_POINT;

            // Bitmap header size.
            static constexpr int BMP_HEADER_SIZE = 54;

            // Direction of the light source, in compass degrees (0 = _north, 90 = _east,
            // 180 = _south, 270 = _east)
            static constexpr double DEFAULT_LIGHT_AZIMUTH = 45.0;

            // Amount of contrast between light and dark areas.
            static constexpr double DEFAULT_LIGHT_CONTRAST = 1.0;

            // Elevation of the light source above the horizon, in degrees (0 = on
            // horizon, 90 = directly overhead)
            static constexpr double DEFAULT_LIGHT_ELEVATION = 45.0;

        };
    }

}

#endif // NOISECONSTANTS
