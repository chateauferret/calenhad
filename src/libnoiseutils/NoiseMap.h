//
// Created by martin on 27/01/17.
//

#ifndef CALENHAD_NOISEMAP_H
#define CALENHAD_NOISEMAP_H

#include <cstdlib>
#include "NoiseConstants.h"

namespace noise {
    namespace utils {


/// Implements a noise map, a 2-dimensional array of floating-point
/// values.
///
/// A noise map is designed to store coherent-noise values generated by a
/// noise module, although it can store values from any source.  A noise
/// map is often used as a terrain height map or a grayscale texture.
///
/// The size (width and height) of the noise map can be specified during
/// object construction or at any other time.
///
/// The GetValue() and SetValue() methods can be used to access individual
/// values stored in the noise map.
///
/// This class manages its own memory.  If you copy a noise map object
/// into another noise map object, the original contents of the noise map
/// object will be freed.
///
/// If you specify a new size for the noise map and the new size is
/// smaller than the current size, the allocated memory will not be
/// reallocated.
/// Call ReclaimMem() to reclaim the wasted memory.
///
/// <b>Border Values</b>
///
/// All of the values outside of the noise map are assumed to have a
/// common value known as the <i>border value</i>.
///
/// To set the border value, call the SetBorderValue() method.
///
/// The GetValue() method returns the border value if the specified value
/// lies outside of the noise map.
///
/// <b>Internal Noise Map Structure</b>
///
/// Internally, the values are organized into horizontal rows called @a
/// slabs.  Slabs are ordered from bottom to top.
///
/// Each slab contains a contiguous row of values in memory.  The values
/// in a slab are organized left to right.
///
/// The offset between the starting points of any two adjacent slabs is
/// called the <i>stride amount</i>.  The stride amount is measured by
/// the number of @a float values between these two starting points, not
/// by the number of bytes.  For efficiency reasons, the stride is often a
/// multiple of the machine word size.
///
/// The GetSlabPtr() and GetConstSlabPtr() methods allow you to retrieve
/// pointers to the slabs themselves.
        class NoiseMap {

        public:

            /// Constructor.
            ///
            /// Creates an empty noise map.
            NoiseMap ();

            /// Constructor.
            ///
            /// @param width The width of the new noise map.
            /// @param height The height of the new noise map.
            ///
            /// @pre The width and height values are positive.
            /// @pre The width and height values do not exceed the maximum
            /// possible width and height for the noise map.
            ///
            /// @throw noise::ExceptionInvalidParam See the preconditions.
            /// @throw noise::ExceptionOutOfMemory Out of memory.
            ///
            /// Creates a noise map with uninitialized values.
            ///
            /// It is considered an error if the specified dimensions are not
            /// positive.
            NoiseMap (int width, int height);

            /// Copy constructor.
            ///
            /// @throw noise::ExceptionOutOfMemory Out of memory.
            NoiseMap (const NoiseMap& rhs);

            /// Destructor.
            ///
            /// Frees the allocated memory for the noise map.
            ~NoiseMap ();

            /// Assignment operator.
            ///
            /// @throw noise::ExceptionOutOfMemory Out of memory.
            ///
            /// @returns Reference to self.
            ///
            /// Creates a copy of the noise map.
            NoiseMap& operator= (const NoiseMap& rhs);

            /// Clears the noise map to a specified value.
            ///
            /// @param value The value that all positions within the noise map are
            /// cleared to.
            void Clear (float value);

            /// Returns the value used for all positions outside of the noise map.
            ///
            /// @returns The value used for all positions outside of the noise
            /// map.
            ///
            /// All positions outside of the noise map are assumed to have a
            /// common value known as the <i>border value</i>.
            float GetBorderValue () const {
                return m_borderValue;
            }

            /// Returns a const pointer to a slab.
            ///
            /// @returns A const pointer to a slab at the position (0, 0), or
            /// @a NULL if the noise map is empty.
            const float* GetConstSlabPtr () const {
                return m_pNoiseMap;
            }

            /// Returns a const pointer to a slab at the specified row.
            ///
            /// @param row The row, or @a y coordinate.
            ///
            /// @returns A const pointer to a slab at the position ( 0, @a row ),
            /// or @a NULL if the noise map is empty.
            ///
            /// @pre The coordinates must exist within the bounds of the noise
            /// map.
            ///
            /// This method does not perform bounds checking so be careful when
            /// calling it.
            const float* GetConstSlabPtr (int row) const {
                return GetConstSlabPtr (0, row);
            }

            /// Returns a const pointer to a slab at the specified position.
            ///
            /// @param x The x coordinate of the position.
            /// @param y The y coordinate of the position.
            ///
            /// @returns A const pointer to a slab at the position ( @a x, @a y ),
            /// or @a NULL if the noise map is empty.
            ///
            /// @pre The coordinates must exist within the bounds of the noise
            /// map.
            ///
            /// This method does not perform bounds checking so be careful when
            /// calling it.
            const float* GetConstSlabPtr (int x, int y) const {
                return m_pNoiseMap + (size_t) x + (size_t) m_stride * (size_t) y;
            }

            /// Returns the height of the noise map.
            ///
            /// @returns The height of the noise map.
            int GetHeight () const {
                return m_height;
            }

            /// Returns the amount of memory allocated for this noise map.
            ///
            /// @returns The amount of memory allocated for this noise map.
            ///
            /// This method returns the number of @a float values allocated.
            size_t GetMemUsed () const {
                return m_memUsed;
            }

            /// Returns a pointer to a slab.
            ///
            /// @returns A pointer to a slab at the position (0, 0), or @a NULL if
            /// the noise map is empty.
            float* GetSlabPtr () {
                return m_pNoiseMap;
            }

            /// Returns a pointer to a slab at the specified row.
            ///
            /// @param row The row, or @a y coordinate.
            ///
            /// @returns A pointer to a slab at the position ( 0, @a row ), or
            /// @a NULL if the noise map is empty.
            ///
            /// @pre The coordinates must exist within the bounds of the noise
            /// map.
            ///
            /// This method does not perform bounds checking so be careful when
            /// calling it.
            float* GetSlabPtr (int row) {
                return GetSlabPtr (0, row);
            }

            /// Returns a pointer to a slab at the specified position.
            ///
            /// @param x The x coordinate of the position.
            /// @param y The y coordinate of the position.
            ///
            /// @returns A pointer to a slab at the position ( @a x, @a y ) or
            /// @a NULL if the noise map is empty.
            ///
            /// @pre The coordinates must exist within the bounds of the noise
            /// map.
            ///
            /// This method does not perform bounds checking so be careful when
            /// calling it.
            float* GetSlabPtr (int x, int y) {
                return m_pNoiseMap + (size_t) x + (size_t) m_stride * (size_t) y;
            }

            /// Returns the stride amount of the noise map.
            ///
            /// @returns The stride amount of the noise map.
            ///
            /// - The <i>stride amount</i> is the offset between the starting
            ///   points of any two adjacent slabs in a noise map.
            /// - The stride amount is measured by the number of @a float values
            ///   between these two points, not by the number of bytes.
            int GetStride () const {
                return m_stride;
            }

            /// Returns a value from the specified position in the noise map.
            ///
            /// @param x The x coordinate of the position.
            /// @param y The y coordinate of the position.
            ///
            /// @returns The value at that position.
            ///
            /// This method returns the border value if the coordinates exist
            /// outside of the noise map.
            float GetValue (int x, int y) const;

            /// Returns the width of the noise map.
            ///
            /// @returns The width of the noise map.
            int GetWidth () const {
                return m_width;
            }

            /// Reallocates the noise map to recover wasted memory.
            ///
            /// @throw noise::ExceptionOutOfMemory Out of memory.  (Yes, this
            /// method can return an out-of-memory exception because two noise
            /// maps will temporarily exist in memory during this call.)
            ///
            /// The contents of the noise map is unaffected.
            void ReclaimMem ();

            /// Sets the value to use for all positions outside of the noise map.
            ///
            /// @param borderValue The value to use for all positions outside of
            /// the noise map.
            ///
            /// All positions outside of the noise map are assumed to have a
            /// common value known as the <i>border value</i>.
            void SetBorderValue (float borderValue) {
                m_borderValue = borderValue;
            }

            /// Sets the new size for the noise map.
            ///
            /// @param width The new width for the noise map.
            /// @param height The new height for the noise map.
            ///
            /// @pre The width and height values are positive.
            /// @pre The width and height values do not exceed the maximum
            /// possible width and height for the noise map.
            ///
            /// @throw noise::ExceptionInvalidParam See the preconditions.
            /// @throw noise::ExceptionOutOfMemory Out of memory.
            ///
            /// On exit, the contents of the noise map are undefined.
            ///
            /// If the @a OUT_OF_MEMORY exception occurs, this noise map object
            /// becomes empty.
            ///
            /// If the @a INVALID_PARAM exception occurs, the noise map is
            /// unmodified.
            void SetSize (int width, int height);

            /// Sets a value at a specified position in the noise map.
            ///
            /// @param x The x coordinate of the position.
            /// @param y The y coordinate of the position.
            /// @param value The value to set at the given position.
            ///
            /// This method does nothing if the noise map object is empty or the
            /// position is outside the bounds of the noise map.
            void SetValue (int x, int y, float value);

            /// Takes ownership of the buffer within the source noise map.
            ///
            /// @param source The source noise map.
            ///
            /// On exit, the source noise map object becomes empty.
            ///
            /// This method only moves the buffer pointer so this method is very
            /// quick.
            void TakeOwnership (NoiseMap& source);

        private:

            /// Returns the minimum amount of memory required to store a noise map
            /// of the specified size.
            ///
            /// @param width The width of the noise map.
            /// @param height The height of the noise map.
            ///
            /// @returns The minimum amount of memory required to store the noise
            /// map.
            ///
            /// The returned value is measured by the number of @a float values
            /// required to store the noise map, not by the number of bytes.
            size_t CalcMinMemUsage (int width, int height) const {
                return CalcStride ((size_t) width) * (size_t) height;
            }

            /// Calculates the stride amount for a noise map.
            ///
            /// @param width The width of the noise map.
            ///
            /// @returns The stride amount.
            ///
            /// - The <i>stride amount</i> is the offset between the starting
            ///   points of any two adjacent slabs in a noise map.
            /// - The stride amount is measured by the number of @a float values
            ///   between these two points, not by the number of bytes.
            size_t CalcStride (int width) const {
                return (size_t) (((width + NoiseConstants::RASTER_STRIDE_BOUNDARY - 1)
                                  / NoiseConstants::RASTER_STRIDE_BOUNDARY) * NoiseConstants::RASTER_STRIDE_BOUNDARY);
            }

            /// Copies the contents of the buffer in the source noise map into
            /// this noise map.
            ///
            /// @param source The source noise map.
            ///
            /// @throw noise::ExceptionOutOfMemory Out of memory.
            ///
            /// This method reallocates the buffer in this noise map object if
            /// necessary.
            ///
            /// @warning This method calls the standard library function
            /// @a memcpy, which probably violates the DMCA because it can be used
            //. to make a bitwise copy of anything, like, say, a DVD.  Don't call
            /// this method if you live in the USA.
            void CopyNoiseMap (const NoiseMap& source);

            /// Resets the noise map object.
            ///
            /// This method is similar to the InitObj() method, except this method
            /// deletes the buffer in this noise map.
            void DeleteNoiseMapAndReset ();

            /// Initializes the noise map object.
            ///
            /// @pre Must be called during object construction.
            /// @pre The noise map buffer must not exist.
            void InitObj ();

            /// Value used for all positions outside of the noise map.
            float m_borderValue;

            /// The current height of the noise map.
            int m_height;

            /// The amount of memory allocated for this noise map.
            ///
            /// This value is equal to the number of @a float values allocated for
            /// the noise map, not the number of bytes.
            size_t m_memUsed;

            /// A pointer to the noise map buffer.
            float* m_pNoiseMap;

            /// The stride amount of the noise map.
            int m_stride;

            /// The current width of the noise map.
            int m_width;

        };

    }
}
#endif //CALENHAD_NOISEMAP_H
